/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Info;
import model.ProfileList;

/**
 *
 * @author ZeyuLiao
 */
public class ViewPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreatePanel
     */
    ProfileList pList;

    public ViewPanel(ProfileList pList) {
        this.pList = pList;
            
        initComponents();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPaneView = new javax.swing.JScrollPane();
        jPanelView = new javax.swing.JPanel();
        jScrollPaneViewAll = new javax.swing.JScrollPane();
        jTableViewAll = new javax.swing.JTable();
        jLabelTitle = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanelButtonGroup = new javax.swing.JPanel();
        jButtonViewProfile = new javax.swing.JButton();
        jButtonUpdateProfile = new javax.swing.JButton();
        jButtonDeleteProfile = new javax.swing.JButton();
        jButtonSearchProfile = new javax.swing.JButton();
        jButtonRefresh = new javax.swing.JButton();
        jComboBoxSearchSyntax = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jPanelEmptyDisplay = new javax.swing.JPanel();

        jScrollPaneView.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jTableViewAll.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "ID", "Team", "Position", "Level"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPaneViewAll.setViewportView(jTableViewAll);

        jLabelTitle.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitle.setText("ViewProfile");

        jSplitPane1.setDividerLocation(40);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jButtonViewProfile.setText("View Details");
        jButtonViewProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewProfileActionPerformed(evt);
            }
        });

        jButtonUpdateProfile.setText("Update Profile");
        jButtonUpdateProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateProfileActionPerformed(evt);
            }
        });

        jButtonDeleteProfile.setText("Delete Profile");
        jButtonDeleteProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteProfileActionPerformed(evt);
            }
        });

        jButtonSearchProfile.setText("Search Profile");
        jButtonSearchProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchProfileActionPerformed(evt);
            }
        });

        jButtonRefresh.setText("Refresh");
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });

        jComboBoxSearchSyntax.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "ID", "Team", "Position" }));

        jLabel1.setText("BY");

        javax.swing.GroupLayout jPanelButtonGroupLayout = new javax.swing.GroupLayout(jPanelButtonGroup);
        jPanelButtonGroup.setLayout(jPanelButtonGroupLayout);
        jPanelButtonGroupLayout.setHorizontalGroup(
            jPanelButtonGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelButtonGroupLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonRefresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addComponent(jButtonViewProfile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonUpdateProfile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDeleteProfile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSearchProfile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSearchSyntax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );
        jPanelButtonGroupLayout.setVerticalGroup(
            jPanelButtonGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelButtonGroupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelButtonGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonViewProfile)
                    .addComponent(jButtonUpdateProfile)
                    .addComponent(jButtonDeleteProfile)
                    .addComponent(jButtonSearchProfile)
                    .addComponent(jButtonRefresh)
                    .addComponent(jComboBoxSearchSyntax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanelButtonGroup);

        javax.swing.GroupLayout jPanelEmptyDisplayLayout = new javax.swing.GroupLayout(jPanelEmptyDisplay);
        jPanelEmptyDisplay.setLayout(jPanelEmptyDisplayLayout);
        jPanelEmptyDisplayLayout.setHorizontalGroup(
            jPanelEmptyDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 740, Short.MAX_VALUE)
        );
        jPanelEmptyDisplayLayout.setVerticalGroup(
            jPanelEmptyDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 413, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(jPanelEmptyDisplay);

        javax.swing.GroupLayout jPanelViewLayout = new javax.swing.GroupLayout(jPanelView);
        jPanelView.setLayout(jPanelViewLayout);
        jPanelViewLayout.setHorizontalGroup(
            jPanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelViewLayout.createSequentialGroup()
                .addGroup(jPanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelViewLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPaneViewAll))
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(jPanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelViewLayout.createSequentialGroup()
                    .addGap(73, 73, 73)
                    .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE)
                    .addGap(74, 74, 74)))
        );
        jPanelViewLayout.setVerticalGroup(
            jPanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelViewLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jScrollPaneViewAll, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1)
                .addContainerGap())
            .addGroup(jPanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelViewLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabelTitle)
                    .addContainerGap(607, Short.MAX_VALUE)))
        );

        jScrollPaneView.setViewportView(jPanelView);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneView)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneView)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_jButtonRefreshActionPerformed

    private void jButtonDeleteProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteProfileActionPerformed
        // TODO add your handling code here:
        int selectRowIndex = jTableViewAll.getSelectedRow();
        if(selectRowIndex <0){
            JOptionPane.showMessageDialog(this,"Please select a row to delete");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) jTableViewAll.getModel();
        Info selectInfo = (Info) model.getValueAt(selectRowIndex ,0 );
        pList.deleteProfiles(selectInfo);
        JOptionPane.showMessageDialog(this,"Profile deleted");
        jSplitPane1.setBottomComponent(jPanelEmptyDisplay);
        populateTable();

    }//GEN-LAST:event_jButtonDeleteProfileActionPerformed

    private void jButtonUpdateProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateProfileActionPerformed
        // TODO add your handling code here:

        int selectRowIndex = jTableViewAll.getSelectedRow();
        if(selectRowIndex <0){
            JOptionPane.showMessageDialog(this,"Please select a row to update");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) jTableViewAll.getModel();
        Info selectInfo = (Info) model.getValueAt(selectRowIndex ,0 );

        UpdatePanel ep = new UpdatePanel(selectInfo, pList);
        jSplitPane1.setBottomComponent(ep);
        populateTable();

    }//GEN-LAST:event_jButtonUpdateProfileActionPerformed

    private void jButtonViewProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewProfileActionPerformed
        // TODO add your handling code here:

        int selectRowIndex = jTableViewAll.getSelectedRow();
        if(selectRowIndex <0){
            JOptionPane.showMessageDialog(this,"Please select a row to view details");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) jTableViewAll.getModel();
        Info selectInfo = (Info) model.getValueAt(selectRowIndex ,0 );
        DetailPanel dp = new DetailPanel(selectInfo);
        jSplitPane1.setBottomComponent(dp);

    }//GEN-LAST:event_jButtonViewProfileActionPerformed

    private void jButtonSearchProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchProfileActionPerformed
        // TODO add your handling code here:
        jSplitPane1.setBottomComponent(jPanelEmptyDisplay);
        String keyWords = JOptionPane.showInputDialog(null, "Please input key words");
        if(keyWords == null) return;
        SearchTable(keyWords, (String) jComboBoxSearchSyntax.getSelectedItem());
        
        
    }//GEN-LAST:event_jButtonSearchProfileActionPerformed

    private void populateTable(){
        DefaultTableModel model = (DefaultTableModel) jTableViewAll.getModel();
        model.setRowCount(0);
        
        for (Info info : pList.getHistory()){
            Object[] row = new Object[5];          
            row[0] = info;
            row[1] = info.getId();
            row[2] = info.getTeam_info();
            row[3] = info.getPosition_title();
            row[4] = info.getLevel();
            
            model.addRow(row);           
        }
        
    }
    
    private void SearchTable(String keyWords, String matchPattern){
        DefaultTableModel model = (DefaultTableModel) jTableViewAll.getModel();
        model.setRowCount(0);
        
        switch(matchPattern){
            case "Name"->  {
               for (Info info : pList.getHistory()){
                    if(keyWords.equals(info.getName())){
                        Object[] row = new Object[5];          
                        row[0] = info;
                        row[1] = info.getId();
                        row[2] = info.getTeam_info();
                        row[3] = info.getPosition_title();
                        row[4] = info.getLevel();
                        model.addRow(row);                
                    }
                    
                } 
            }
            
            case "ID" -> {
                for (Info info : pList.getHistory()){
                    if(keyWords.equals(String.valueOf(info.getId())) ){
                        Object[] row = new Object[5];          
                        row[0] = info;
                        row[1] = info.getId();
                        row[2] = info.getTeam_info();
                        row[3] = info.getPosition_title();
                        row[4] = info.getLevel();
                        model.addRow(row);                
                    }
                }                               
            }
        
            case "Team" -> {
                for (Info info : pList.getHistory()){
                    if(keyWords.equals(info.getTeam_info())){
                        Object[] row = new Object[5];          
                        row[0] = info;
                        row[1] = info.getId();
                        row[2] = info.getTeam_info();
                        row[3] = info.getPosition_title();
                        row[4] = info.getLevel();
                        model.addRow(row);                
                    }
                }                              
            }
            
            case "Position" -> {
                for (Info info : pList.getHistory()){
                    if(keyWords.equals(info.getPosition_title())){
                        Object[] row = new Object[5];          
                        row[0] = info;
                        row[1] = info.getId();
                        row[2] = info.getTeam_info();
                        row[3] = info.getPosition_title();
                        row[4] = info.getLevel();
                        model.addRow(row);                
                    }
                }                              
            }
                     
        }        
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDeleteProfile;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JButton jButtonSearchProfile;
    private javax.swing.JButton jButtonUpdateProfile;
    private javax.swing.JButton jButtonViewProfile;
    private javax.swing.JComboBox<String> jComboBoxSearchSyntax;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JPanel jPanelButtonGroup;
    private javax.swing.JPanel jPanelEmptyDisplay;
    private javax.swing.JPanel jPanelView;
    private javax.swing.JScrollPane jScrollPaneView;
    private javax.swing.JScrollPane jScrollPaneViewAll;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTableViewAll;
    // End of variables declaration//GEN-END:variables
}
